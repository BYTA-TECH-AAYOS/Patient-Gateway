/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (3.0.0-SNAPSHOT).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.bytatech.ayoos.patientapigateway.client.payment.api;

import java.util.List;
import com.bytatech.ayoos.patientapigateway.client.payment.model.Patch;
import com.bytatech.ayoos.patientapigateway.client.payment.model.Payment;
import com.bytatech.ayoos.patientapigateway.client.payment.model.PaymentExecutionRequest;
import com.bytatech.ayoos.patientapigateway.client.payment.model.PaymentInitiateRequest;
import com.bytatech.ayoos.patientapigateway.client.payment.model.PaymentInitiateResponse;
import com.bytatech.ayoos.patientapigateway.client.payment.model.RefundSaleRequest;
import io.swagger.annotations.*;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;


import javax.validation.Valid;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2018-09-18T12:45:05.497+05:30[Asia/Kolkata]")

@Api(value = "PaymentCommandResource", description = "the PaymentCommandResource API")
public interface PaymentCommandResourceApi {

    @ApiOperation(value = "createPayment", nickname = "createPaymentUsingPOST", notes = "", tags={ "payment-command-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/command/payments",
        consumes = "application/json",
        method = RequestMethod.POST)
    ResponseEntity<Void> createPaymentUsingPOST(@ApiParam(value = "payment" ,required=true )  @Valid @RequestBody Payment payment);


    @ApiOperation(value = "deletePayment", nickname = "deletePaymentUsingDELETE", notes = "", tags={ "payment-command-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 204, message = "No Content"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden") })
    @RequestMapping(value = "/api/command/payments/{id}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deletePaymentUsingDELETE(@ApiParam(value = "id",required=true) @PathVariable("id") Long id);


    @ApiOperation(value = "executePayment", nickname = "executePaymentUsingPOST", notes = "", tags={ "payment-command-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/command/paymentGateway/payments/{payment_id}/execute",
        consumes = "application/json",
        method = RequestMethod.POST)
    ResponseEntity<Void> executePaymentUsingPOST(@ApiParam(value = "payment_id",required=true) @PathVariable("payment_id") String paymentId,@ApiParam(value = "paymentExecutionRequest"  )  @Valid @RequestBody PaymentExecutionRequest paymentExecutionRequest);


    @ApiOperation(value = "initiatePayment", nickname = "initiatePaymentUsingPOST", notes = "", response = PaymentInitiateResponse.class, tags={ "payment-command-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = PaymentInitiateResponse.class),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/command/paymentGateway/payments/initiate",
        produces = "*/*", 
        consumes = "application/json",
        method = RequestMethod.POST)
    ResponseEntity<PaymentInitiateResponse> initiatePaymentUsingPOST(@ApiParam(value = "paymentInitiateRequest" ,required=true )  @Valid @RequestBody PaymentInitiateRequest paymentInitiateRequest);


    @ApiOperation(value = "refundSale", nickname = "refundSaleUsingPOST", notes = "", tags={ "payment-command-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/command/paymentGateway/payments/sale/{sale_id}/refund",
        consumes = "application/json",
        method = RequestMethod.POST)
    ResponseEntity<Void> refundSaleUsingPOST(@ApiParam(value = "sale_id",required=true) @PathVariable("sale_id") String saleId,@ApiParam(value = "refundSaleRequest" ,required=true )  @Valid @RequestBody RefundSaleRequest refundSaleRequest);


    @ApiOperation(value = "updatePayment", nickname = "updatePaymentUsingPATCH", notes = "", tags={ "payment-command-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 204, message = "No Content"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden") })
    @RequestMapping(value = "/api/command/paymentGateway/payments/{payment_id}",
        consumes = "application/json",
        method = RequestMethod.PATCH)
    ResponseEntity<Void> updatePaymentUsingPATCH(@ApiParam(value = "payment_id",required=true) @PathVariable("payment_id") String paymentId,@ApiParam(value = "patchRequest" ,required=true )  @Valid @RequestBody List<Patch> patch);


    @ApiOperation(value = "updatePayment", nickname = "updatePaymentUsingPUT", notes = "", tags={ "payment-command-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/command/payments",
        consumes = "application/json",
        method = RequestMethod.PUT)
    ResponseEntity<Void> updatePaymentUsingPUT(@ApiParam(value = "payment" ,required=true )  @Valid @RequestBody Payment payment);

}
