/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (3.0.0-SNAPSHOT).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.bytatech.ayoos.patientapigateway.client.payment.api;

import com.bytatech.ayoos.patientapigateway.client.payment.model.PaymentDTO;
import com.bytatech.ayoos.patientapigateway.client.payment.model.PaymentDetails;
import com.bytatech.ayoos.patientapigateway.client.payment.model.PaymentHistory;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2018-09-18T12:45:05.497+05:30[Asia/Kolkata]")

@Api(value = "PaymentQueryResource", description = "the PaymentQueryResource API")
public interface PaymentQueryResourceApi {

    @ApiOperation(value = "getAllPaymentsFromGateway", nickname = "getAllPaymentsFromGatewayUsingGET", notes = "", response = PaymentHistory.class, tags={ "payment-query-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = PaymentHistory.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/query/paymentGateway/payments",
        produces = "*/*", 
        method = RequestMethod.GET)
    ResponseEntity<PaymentHistory> getAllPaymentsFromGatewayUsingGET();


    @ApiOperation(value = "getAllPayments", nickname = "getAllPaymentsUsingGET", notes = "", response = PaymentDTO.class, responseContainer = "List", tags={ "payment-query-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = PaymentDTO.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/query/payments",
        produces = "*/*", 
        method = RequestMethod.GET)
    ResponseEntity<List<PaymentDTO>> getAllPaymentsUsingGET(@ApiParam(value = "") @Valid @RequestParam(value = "offset", required = false) Long offset,@ApiParam(value = "Page number of the requested page") @Valid @RequestParam(value = "page", required = false) Integer page,@ApiParam(value = "") @Valid @RequestParam(value = "pageNumber", required = false) Integer pageNumber,@ApiParam(value = "") @Valid @RequestParam(value = "pageSize", required = false) Integer pageSize,@ApiParam(value = "") @Valid @RequestParam(value = "paged", required = false) Boolean paged,@ApiParam(value = "Size of a page") @Valid @RequestParam(value = "size", required = false) Integer size,@ApiParam(value = "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.") @Valid @RequestParam(value = "sort", required = false) List<String> sort,@ApiParam(value = "") @Valid @RequestParam(value = "sort.sorted", required = false) Boolean sortSorted,@ApiParam(value = "") @Valid @RequestParam(value = "sort.unsorted", required = false) Boolean sortUnsorted,@ApiParam(value = "") @Valid @RequestParam(value = "unpaged", required = false) Boolean unpaged);


    @ApiOperation(value = "getPayment", nickname = "getPaymentUsingGET", notes = "", response = PaymentDetails.class, tags={ "payment-query-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = PaymentDetails.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/query/paymentGateway/payments/{payment_id}",
        produces = "*/*", 
        method = RequestMethod.GET)
    ResponseEntity<PaymentDetails> getPaymentUsingGET(@ApiParam(value = "payment_id",required=true) @PathVariable("payment_id") String paymentId);


    @ApiOperation(value = "getPayment", nickname = "getPaymentUsingGET1", notes = "", response = PaymentDTO.class, tags={ "payment-query-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = PaymentDTO.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/query/payments/{id}",
        produces = "*/*", 
        method = RequestMethod.GET)
    ResponseEntity<PaymentDTO> getPaymentUsingGET1(@ApiParam(value = "id",required=true) @PathVariable("id") Long id);


    @ApiOperation(value = "searchPayments", nickname = "searchPaymentsUsingGET", notes = "", response = PaymentDTO.class, responseContainer = "List", tags={ "payment-query-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = PaymentDTO.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/query/_search/payments",
        produces = "*/*", 
        method = RequestMethod.GET)
    ResponseEntity<List<PaymentDTO>> searchPaymentsUsingGET(@NotNull @ApiParam(value = "query", required = true) @Valid @RequestParam(value = "query", required = true) String query,@ApiParam(value = "") @Valid @RequestParam(value = "offset", required = false) Long offset,@ApiParam(value = "Page number of the requested page") @Valid @RequestParam(value = "page", required = false) Integer page,@ApiParam(value = "") @Valid @RequestParam(value = "pageNumber", required = false) Integer pageNumber,@ApiParam(value = "") @Valid @RequestParam(value = "pageSize", required = false) Integer pageSize,@ApiParam(value = "") @Valid @RequestParam(value = "paged", required = false) Boolean paged,@ApiParam(value = "Size of a page") @Valid @RequestParam(value = "size", required = false) Integer size,@ApiParam(value = "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.") @Valid @RequestParam(value = "sort", required = false) List<String> sort,@ApiParam(value = "") @Valid @RequestParam(value = "sort.sorted", required = false) Boolean sortSorted,@ApiParam(value = "") @Valid @RequestParam(value = "sort.unsorted", required = false) Boolean sortUnsorted,@ApiParam(value = "") @Valid @RequestParam(value = "unpaged", required = false) Boolean unpaged);

}
